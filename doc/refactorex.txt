*refactorex.txt*    Neovim plugin for RefactorEx - Elixir refactoring tool
*refactorex* *refactorex.nvim*

==============================================================================
CONTENTS                                                    *refactorex-contents*

    1. Introduction ........................... |refactorex-introduction|
    2. Prerequisites .......................... |refactorex-prerequisites|
    3. Installation ........................... |refactorex-installation|
    4. Commands ............................... |refactorex-commands|
    5. Configuration .......................... |refactorex-configuration|
    6. Usage ................................. |refactorex-usage|
    7. Key Bindings .......................... |refactorex-keybindings|

==============================================================================
1. INTRODUCTION                                         *refactorex-introduction*

refactorex.nvim is a Neovim plugin that integrates with RefactorEx
(https://github.com/gp-pereira/refactorex), providing LSP-based refactoring
capabilities for Elixir code.

==============================================================================
2. PREREQUISITES                                       *refactorex-prerequisites*

The following are required to use refactorex.nvim:

- Neovim 0.8.0 or higher
- Elixir and Mix installed on your system

==============================================================================
3. INSTALLATION                                        *refactorex-installation*

With lazy.nvim: >

    {
      "synic/refactorex.nvim",
      ft = "elixir", -- only if you want to lazy load
      config = true,
    }
<

Without lazy.nvim (using packer.nvim): >

    use {
      "synic/refactorex.nvim",
      config = function()
        require("refactorex").setup()
      end,
    }
<

==============================================================================
4. COMMANDS                                               *refactorex-commands*

                                                            *:RefactorExDownload*
:RefactorExDownload
    Downloads and installs the latest version of RefactorEx. If RefactorEx is
    already installed, this command will remove the existing installation and
    perform a fresh installation. If the LSP server is running, it will be
    restarted with the new version. This includes:
    1. Downloading the RefactorEx archive
    2. Extracting the archive
    3. Running `mix deps.get`
    4. Running `mix compile`
    5. Restarting the LSP server if it's running

Note: The plugin will automatically download and install RefactorEx when needed,
so manual use of `:RefactorExDownload` is only necessary if you want to force a
fresh installation.

==============================================================================
4. CONFIGURATION                                     *refactorex-configuration*

The following options can be passed to the setup function:

                                                    *refactorex-config-auto_update*
auto_update     (boolean)
                When true, automatically checks for updates when the plugin loads.
                Default: true >

    require('refactorex').setup({
        auto_update = false  -- disable automatic update checks
    })
<

                                                    *refactorex-config-pin_version*
pin_version     (string)
                When set, forces the plugin to use this specific version of
                RefactorEx. This overrides auto_update. Example: "0.1.30" >

    require('refactorex').setup({
        pin_version = "0.1.30"  -- force specific version
    })
<

==============================================================================
5. USAGE                                                    *refactorex-usage*

refactorex.nvim integrates with Neovim's built-in LSP system through two main
functions:

                                                    *refactorex-usage-code-action*
vim.lsp.buf.code_action()
    Shows available code actions for the current context. For example, with the
    following code: >

        def ship(item_id, quantity) do
          items = Inventory.take!(item_id, quantity)
          ...
        end
<
    If you highlight the `items =` line and run `:lua vim.lsp.buf.code_action()`,
    you'll see the option to "Introduce IO.inspect". Selecting this will modify
    the line to: >

        items = Inventory.take!(item_id, quantity) |> IO.inspect()
<
    Many refactoring options are context-specific. See
    https://github.com/gp-pereira/refactorex for more examples.

                                                      *refactorex-usage-rename*
vim.lsp.buf.rename()
    Allows renaming a symbol and all its occurrences. Currently only works with
    local symbols in the same file. Position the cursor on a symbol and run
    `:lua vim.lsp.buf.rename()` to use this feature.

==============================================================================
6. KEY BINDINGS                                        *refactorex-keybindings*

While the plugin doesn't set any default keybindings, here's an example of how
to configure them using an LspAttach autocmd: >

    vim.api.nvim_create_autocmd("LspAttach", {
        group = vim.api.nvim_create_augroup("UserLspConfig", {}),
        callback = function(event)
            -- code actions keybinding, in normal and visual mode
            vim.keymap.set(
                "n",
                "ga",
                vim.lsp.buf.code_action,
                { buffer = true, desc = "Show code actions" }
            )
            vim.keymap.set(
                "v",
                "ga",
                vim.lsp.buf.code_action,
                { buffer = true, desc = "Show code actions" }
            )

            -- rename keybinding, in normal and visual mode
            vim.keymap.set(
                "n",
                "ga",
                vim.lsp.buf.rename,
                { buffer = true, desc = "Rename symbol" }
            )
            vim.keymap.set(
                "v",
                "ga",
                vim.lsp.buf.rename,
                { buffer = true, desc = "Rename symbol" }
            )
        end
    })
<

The `buffer = true` option makes these keybindings local to buffers with an
attached LSP server. For filetype-specific bindings, you can check
`vim.bo[event.buf].filetype`.

For more information about LSP configuration, see |lsp|.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
